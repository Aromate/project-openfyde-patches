diff --git a/BUILD.gn b/BUILD.gn
index 5d2e498b..a360ffa9 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -241,6 +241,8 @@ static_library("libupdate_engine") {
     "update_manager/update_time_restrictions_policy_impl.cc",
     "update_manager/weekly_time.cc",
     "update_status_utils.cc",
+    "fydeos_license_checker.cc",
+    "fydeos_toggle_ota.cc",
   ]
   configs += [ ":target_defaults" ]
   libs = [
diff --git a/daemon_chromeos.cc b/daemon_chromeos.cc
index 21740d81..013e6c6c 100644
--- a/daemon_chromeos.cc
+++ b/daemon_chromeos.cc
@@ -37,6 +37,10 @@ int DaemonChromeOS::OnInit() {
   // handler.
   subprocess_.Init(this);
 
+  // ---***FYDEOS BEGIN***---
+  license_checker_.Init();
+  // ---***FYDEOS END***---
+
   int exit_code = Daemon::OnInit();
   if (exit_code != EX_OK)
     return exit_code;
diff --git a/daemon_chromeos.h b/daemon_chromeos.h
index 657e7971..21502a5d 100644
--- a/daemon_chromeos.h
+++ b/daemon_chromeos.h
@@ -23,6 +23,7 @@
 #include "update_engine/daemon_base.h"
 #include "update_engine/daemon_state_interface.h"
 #include "update_engine/dbus_service.h"
+#include "update_engine/fydeos_license_checker.h"
 
 namespace chromeos_update_engine {
 
@@ -47,6 +48,10 @@ class DaemonChromeOS : public DaemonBase {
   // the main() function.
   Subprocess subprocess_;
 
+  // ---***FYDEOS BEGIN***---
+  fydeos::FydeLicenseChecker license_checker_;
+  // ---***FYDEOS END***---
+
   // The daemon state with all the required daemon classes for the configured
   // platform.
   std::unique_ptr<DaemonStateInterface> daemon_state_;
diff --git a/fydeos_license_checker.cc b/fydeos_license_checker.cc
new file mode 100644
index 00000000..eeac8269
--- /dev/null
+++ b/fydeos_license_checker.cc
@@ -0,0 +1,46 @@
+#include "update_engine/fydeos_license_checker.h"
+
+#include <base/logging.h>
+#include <base/strings/stringprintf.h>
+#include <base/optional.h>
+#include <base/json/json_reader.h>
+#include <base/base64.h>
+#include <base/values.h>
+#include <crypto/signature_verifier.h>
+
+#include "update_engine/common/subprocess.h"
+
+namespace fydeos {
+
+namespace {
+  const char kShellCmd[] = "/usr/share/fydeos_shell/license-utils.sh";
+  const char kParamId[] = "id";
+} // namespace
+
+FydeLicenseChecker::FydeLicenseChecker() = default;
+FydeLicenseChecker::~FydeLicenseChecker() {
+  if (license_checker_singleton_ == this) {
+    license_checker_singleton_ = nullptr;
+  }
+}
+
+void FydeLicenseChecker::Init() {
+  if (license_checker_singleton_ == this)
+    return;
+  CHECK(license_checker_singleton_ == nullptr);
+  license_checker_singleton_ = this;
+
+  int exit_code = 0;
+  std::string value, error;
+  std::vector<std::string> cmd = {kShellCmd, kParamId};
+  if (!chromeos_update_engine::Subprocess::SynchronousExec(cmd, &exit_code, &value, &error) || exit_code) {
+    LOG(ERROR) << "Get fydeos license id error, exit_code: " << exit_code;
+    return;
+  }
+  base::TrimWhitespaceASCII(value, base::TRIM_ALL, &license_id_);
+  LOG(INFO) << "FydeOS license id: " << license_id_;
+}
+
+FydeLicenseChecker* FydeLicenseChecker::license_checker_singleton_ = nullptr;
+
+} // namespace fydeos
diff --git a/fydeos_license_checker.h b/fydeos_license_checker.h
new file mode 100644
index 00000000..110e47fe
--- /dev/null
+++ b/fydeos_license_checker.h
@@ -0,0 +1,25 @@
+#ifndef UPDATE_ENGINE_FYDEOS_LICENSE_CHECKER_H
+#define UPDATE_ENGINE_FYDEOS_LICENSE_CHECKER_H
+
+#include <string>
+#include <memory>
+
+namespace fydeos {
+
+class FydeLicenseChecker {
+  public:
+    explicit FydeLicenseChecker();
+    ~FydeLicenseChecker();
+
+    static FydeLicenseChecker& Get() { return *license_checker_singleton_; }
+    void Init();
+    std::string GetLicenseId() const { return license_id_; };
+
+  private:
+    static FydeLicenseChecker* license_checker_singleton_;
+
+    std::string license_id_;
+};
+
+} // namespace fydeos
+#endif /* ifndef UPDATE_ENGINE_FYDEOS_LICENSE_CHECKER_H */
diff --git a/fydeos_toggle_ota.cc b/fydeos_toggle_ota.cc
new file mode 100644
index 00000000..631a4ad6
--- /dev/null
+++ b/fydeos_toggle_ota.cc
@@ -0,0 +1,15 @@
+#include "update_engine/fydeos_toggle_ota.h"
+#include <base/files/file_util.h>
+
+namespace fydeos {
+namespace {
+  // keep it the same with chromium src fydeos/misc/fydeos_toggle_ota.cc
+  const char kFydeOSOTAIndicatorFile[] = "/mnt/stateful_partition/unencrypted/preserve/.disable_fydeos_ota";
+}
+
+bool OTAEnabled() {
+  const bool enabled = !base::PathExists(base::FilePath(kFydeOSOTAIndicatorFile));
+  return enabled;
+}
+
+} // fydeos
diff --git a/fydeos_toggle_ota.h b/fydeos_toggle_ota.h
new file mode 100644
index 00000000..2c0fbb05
--- /dev/null
+++ b/fydeos_toggle_ota.h
@@ -0,0 +1,8 @@
+#ifndef FYDEOS_TOGGLE_OTA_H_
+#define FYDEOS_TOGGLE_OTA_H_
+
+namespace fydeos {
+  bool OTAEnabled();
+}
+
+#endif // ifndef FYDEOS_TOGGLE_OTA_H_
diff --git a/omaha_request_action.cc b/omaha_request_action.cc
index 83ee5b22..bd3d64f5 100644
--- a/omaha_request_action.cc
+++ b/omaha_request_action.cc
@@ -56,6 +56,7 @@
 #include "update_engine/p2p_manager.h"
 #include "update_engine/payload_state_interface.h"
 #include "update_engine/update_attempter.h"
+#include "update_engine/fydeos_toggle_ota.h"
 
 using base::Optional;
 using base::Time;
@@ -1530,6 +1531,11 @@ bool OmahaRequestAction::ShouldIgnoreUpdate(const OmahaResponse& response,
     LOG(ERROR) << "All packages were excluded.";
   }
 
+  if (!fydeos::OTAEnabled()) {
+    LOG(INFO) << "fydeos ota disabled, ignore update";
+    return true;
+  }
+
   // Note: We could technically delete the UpdateFirstSeenAt state when we
   // return true. If we do, it'll mean a device has to restart the
   // UpdateFirstSeenAt and thus help scattering take effect when the AU is
diff --git a/omaha_request_builder_xml.cc b/omaha_request_builder_xml.cc
index 8add89fe..0d7d921f 100644
--- a/omaha_request_builder_xml.cc
+++ b/omaha_request_builder_xml.cc
@@ -31,6 +31,7 @@
 #include "update_engine/common/prefs_interface.h"
 #include "update_engine/common/utils.h"
 #include "update_engine/omaha_request_params.h"
+#include "update_engine/fydeos_license_checker.h"
 
 using std::string;
 
@@ -283,6 +284,11 @@ string OmahaRequestBuilderXml::GetApp(const OmahaAppData& app_data) const {
     app_channels += "from_track=\"" +
                     XmlEncodeWithDefault(params_->current_channel()) + "\" ";
   }
+  // ---***FYDEOS BEGIN***---
+  string license_id = fydeos::FydeLicenseChecker::Get().GetLicenseId();
+  string fydeos_license_id =
+      "fydeos_license_id=\"" + XmlEncodeWithDefault(license_id) + "\" ";
+  // ---***FYDEOS END***---
 
   string delta_okay_str =
       params_->delta_okay() && !params_->is_install() ? "true" : "false";
@@ -372,6 +378,9 @@ string OmahaRequestBuilderXml::GetApp(const OmahaAppData& app_data) const {
       "ec_version=\"" + XmlEncodeWithDefault(params_->ec_version()) + "\" " +
       requisition_arg) +
 
+      // ---***FYDEOS BEGIN***---
+      fydeos_license_id +
+      // ---***FYDEOS END***---
       ">\n" +
          app_body +
       "    </app>\n";
diff --git a/update_attempter.cc b/update_attempter.cc
index 0f0605d5..07b1f41d 100644
--- a/update_attempter.cc
+++ b/update_attempter.cc
@@ -72,6 +72,7 @@
 #include "update_engine/update_manager/policy_utils.h"
 #include "update_engine/update_manager/update_manager.h"
 #include "update_engine/update_status_utils.h"
+#include "update_engine/fydeos_toggle_ota.h"
 
 using base::Bind;
 using base::Callback;
@@ -164,6 +165,11 @@ bool UpdateAttempter::ScheduleUpdates() {
   if (IsBusyOrUpdateScheduled())
     return false;
 
+  if (!fydeos::OTAEnabled()) {
+    LOG(INFO) << "fydeos ota disabled, skip scheduling updates";
+    return false;
+  }
+
   chromeos_update_manager::UpdateManager* const update_manager =
       system_state_->update_manager();
   CHECK(update_manager);
@@ -959,6 +965,11 @@ bool UpdateAttempter::CheckForUpdate(const string& app_version,
               << " already in progress.";
     return false;
   }
+  if (!fydeos::OTAEnabled()) {
+    LOG(INFO) << "fydeos ota disabled, refuse to check for update";
+    BroadcastStatus();
+    return false;
+  }
 
   bool interactive = !(flags & UpdateAttemptFlags::kFlagNonInteractive);
   is_install_ = false;
diff --git a/update_manager/official_build_check_policy_impl.cc b/update_manager/official_build_check_policy_impl.cc
index 096f7bf5..7decdda1 100644
--- a/update_manager/official_build_check_policy_impl.cc
+++ b/update_manager/official_build_check_policy_impl.cc
@@ -24,6 +24,9 @@ EvalStatus OnlyUpdateOfficialBuildsPolicyImpl::UpdateCheckAllowed(
     State* state,
     std::string* error,
     UpdateCheckParams* result) const {
+// ---***FYDEOS BEGIN***---
+  return EvalStatus::kContinue;
+  /*
   const bool* is_official_build_p =
       ec->GetValue(state->system_provider()->var_is_official_build());
   if (is_official_build_p != nullptr && !(*is_official_build_p)) {
@@ -31,6 +34,8 @@ EvalStatus OnlyUpdateOfficialBuildsPolicyImpl::UpdateCheckAllowed(
     return EvalStatus::kAskMeAgainLater;
   }
   return EvalStatus::kContinue;
+  */
+// ---***FYDEOS END***---
 }
 
 }  // namespace chromeos_update_manager
