diff --git a/drivers/gpu/drm/i915/intel_color.c b/drivers/gpu/drm/i915/intel_color.c
old mode 100644
new mode 100755
index b8315bca852b..b9c4f9a41035
--- a/drivers/gpu/drm/i915/intel_color.c
+++ b/drivers/gpu/drm/i915/intel_color.c
@@ -87,24 +87,23 @@ static bool crtc_state_is_legacy_gamma(struct drm_crtc_state *state)
  * the matrix that we would use for the limited range. We do the
  * multiplication in U2.30 format.
  */
-static void ctm_mult_by_limited(uint64_t *result, int64_t *input)
+static void ctm_mult_by_limited(u64 *result, int64_t *input)
 {
 	int i;
-
-	for (i = 0; i < 9; i++)
-		result[i] = 0;
-
-	for (i = 0; i < 3; i++) {
-		int64_t user_coeff = input[i * 3 + i];
-		uint64_t limited_coeff = CTM_COEFF_LIMITED_RANGE >> 2;
-		uint64_t abs_coeff = clamp_val(CTM_COEFF_ABS(user_coeff),
-					       0,
-					       CTM_COEFF_4_0 - 1) >> 2;
-
-		result[i * 3 + i] = (limited_coeff * abs_coeff) >> 27;
-		if (CTM_COEFF_NEGATIVE(user_coeff))
-			result[i * 3 + i] |= CTM_COEFF_SIGN;
-	}
+  for (i = 0; i < 9; i++) {
+    u64 user_coeff = input[i];
+    u32 limited_coeff = CTM_COEFF_LIMITED_RANGE;
+    u32 abs_coeff = clamp_val(CTM_COEFF_ABS(user_coeff), 0,
+            CTM_COEFF_4_0 - 1) >> 2;
+
+    /*
+     * By scaling every co-efficient with limited range (16-235)
+     * vs full range (0-255) the final o/p will be scaled down to
+     * fit in the limited range supported by the panel.
+     */
+    result[i] = mul_u32_u32(limited_coeff, abs_coeff) >> 30;
+    result[i] |= user_coeff & CTM_COEFF_SIGN;
+  }
 }
 
 static void i9xx_load_ycbcr_conversion_matrix(struct intel_crtc *intel_crtc)
diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
old mode 100644
new mode 100755
index c3b4fbcfec3a..fc416f8c279d
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -391,8 +391,10 @@ static bool intel_dp_link_params_valid(struct intel_dp *intel_dp, int link_rate,
 int intel_dp_get_link_train_fallback_values(struct intel_dp *intel_dp,
 					    int link_rate, uint8_t lane_count)
 {
-	int index;
-
+//	int index;
+  DRM_ERROR("Link Training Unsuccessful\n");
+  return -1;
+/*
 	index = intel_dp_rate_index(intel_dp->common_rates,
 				    intel_dp->num_common_rates,
 				    link_rate);
@@ -408,6 +410,7 @@ int intel_dp_get_link_train_fallback_values(struct intel_dp *intel_dp,
 	}
 
 	return 0;
+  */
 }
 
 static enum drm_mode_status
diff --git a/drivers/input/touchscreen/goodix.c b/drivers/input/touchscreen/goodix.c
old mode 100644
new mode 100755
index 2bfa89ec552c..111d979ceb07
--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -34,6 +34,7 @@
 struct goodix_ts_data {
 	struct i2c_client *client;
 	struct input_dev *input_dev;
+  struct input_dev *pen_dev;
 	int abs_x_max;
 	int abs_y_max;
 	bool swapped_x_y;
@@ -78,6 +79,7 @@ struct goodix_ts_data {
 #define RESOLUTION_LOC		1
 #define MAX_CONTACTS_LOC	5
 #define TRIGGER_LOC		6
+#define GOODIX_DEFAULT_MAX_PRESSURE 1024
 
 static const unsigned long goodix_irq_flags[] = {
 	IRQ_TYPE_EDGE_RISING,
@@ -247,12 +249,13 @@ static int goodix_ts_read_input_report(struct goodix_ts_data *ts, u8 *data)
 	return 0;
 }
 
-static void goodix_ts_report_touch(struct goodix_ts_data *ts, u8 *coor_data)
+static void goodix_ts_report_touch(struct goodix_ts_data *ts, u8 *coor_data, u8 key_value)
 {
 	int id = coor_data[0] & 0x0F;
 	int input_x = get_unaligned_le16(&coor_data[1]);
 	int input_y = get_unaligned_le16(&coor_data[3]);
 	int input_w = get_unaligned_le16(&coor_data[5]);
+  struct input_dev *dev;
 
 	/* Inversions have to happen before axis swapping */
 	if (ts->inverted_x)
@@ -261,13 +264,29 @@ static void goodix_ts_report_touch(struct goodix_ts_data *ts, u8 *coor_data)
 		input_y = ts->abs_y_max - input_y;
 	if (ts->swapped_x_y)
 		swap(input_x, input_y);
-
-	input_mt_slot(ts->input_dev, id);
-	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
-	input_report_abs(ts->input_dev, ABS_MT_POSITION_X, input_x);
-	input_report_abs(ts->input_dev, ABS_MT_POSITION_Y, input_y);
-	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
-	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+  if (coor_data[0] & 0x80) { //is pen
+    /*
+    dev_info(&ts->client->dev,  "raw id:0x%x, data[7]:0x%x, key_value:0x%x", 
+      coor_data[0], coor_data[7], key_value);
+    */
+    dev = ts->pen_dev;
+    input_report_abs(dev, ABS_X, input_x);
+  	input_report_abs(dev, ABS_Y, input_y);
+	  input_report_abs(dev, ABS_PRESSURE, input_w);
+	  input_report_key(dev, BTN_TOOL_PEN, input_w > 50);
+	  input_report_key(dev, BTN_TOUCH, input_w > 80);
+    input_report_key(dev, BTN_STYLUS, key_value == 0x91);
+    input_sync(dev);
+  } else {
+    dev = ts->input_dev;
+	  input_mt_slot(dev, id);
+	  input_mt_report_slot_state(dev, MT_TOOL_FINGER, true);
+	  input_report_abs(dev, ABS_MT_POSITION_X, input_x);
+	  input_report_abs(dev, ABS_MT_POSITION_Y, input_y);
+	  input_report_abs(dev, ABS_MT_TOUCH_MAJOR, input_w);
+	  input_report_abs(dev, ABS_MT_WIDTH_MAJOR, input_w);
+    input_report_abs(dev, ABS_MT_PRESSURE, input_w);
+  }
 }
 
 /**
@@ -292,12 +311,11 @@ static void goodix_process_events(struct goodix_ts_data *ts)
 	 * Bit 4 of the first byte reports the status of the capacitive
 	 * Windows/Home button.
 	 */
-	input_report_key(ts->input_dev, KEY_LEFTMETA, point_data[0] & BIT(4));
+	input_report_key(ts->input_dev, KEY_LEFTMETA, point_data[0] == 0x90);
 
 	for (i = 0; i < touch_num; i++)
 		goodix_ts_report_touch(ts,
-				&point_data[1 + GOODIX_CONTACT_SIZE * i]);
-
+				&point_data[1 + GOODIX_CONTACT_SIZE * i], point_data[0]);
 	input_mt_sync_frame(ts->input_dev);
 	input_sync(ts->input_dev);
 }
@@ -605,6 +623,28 @@ static int goodix_i2c_test(struct i2c_client *client)
 	return error;
 }
 
+static int goodix_request_pen_dev(struct goodix_ts_data *ts) {
+  struct input_dev *dev;
+  ts->pen_dev = devm_input_allocate_device(&ts->client->dev);
+  dev = ts->pen_dev;
+  input_set_capability(dev, EV_KEY, BTN_TOUCH);
+  input_set_capability(dev, EV_KEY, BTN_TOOL_PEN);
+  input_set_capability(dev, EV_KEY, BTN_STYLUS);
+  input_set_capability(dev, EV_KEY, BTN_STYLUS2);
+  __set_bit(INPUT_PROP_DIRECT, dev->propbit);
+
+  input_set_abs_params(dev, ABS_X, 0, ts->abs_x_max, 0, 0);
+  input_set_abs_params(dev, ABS_Y, 0, ts->abs_y_max, 0, 0);
+  input_set_abs_params(dev,  ABS_PRESSURE, 0,
+            GOODIX_DEFAULT_MAX_PRESSURE, 0, 0); 
+  dev->name = "Goodix Capacitive Pen";
+  dev->phys = "input/ts";
+  dev->id.bustype = BUS_I2C;
+  dev->id.vendor = 0x0416;
+  dev->id.product = ts->id;
+  dev->id.version = ts->version;
+  return input_register_device(dev);
+}
 /**
  * goodix_request_input_dev - Allocate, populate and register the input device
  *
@@ -621,6 +661,8 @@ static int goodix_request_input_dev(struct goodix_ts_data *ts)
 		dev_err(&ts->client->dev, "Failed to allocate input device.");
 		return -ENOMEM;
 	}
+  ts->input_dev->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY)
+      | BIT_MASK(EV_ABS);
 
 	input_set_abs_params(ts->input_dev, ABS_MT_POSITION_X,
 			     0, ts->abs_x_max, 0, 0);
@@ -628,6 +670,8 @@ static int goodix_request_input_dev(struct goodix_ts_data *ts)
 			     0, ts->abs_y_max, 0, 0);
 	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
 	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+  input_set_abs_params(ts->input_dev, ABS_MT_PRESSURE, 0,
+            GOODIX_DEFAULT_MAX_PRESSURE, 0, 0);
 
 	input_mt_init_slots(ts->input_dev, ts->max_touch_num,
 			    INPUT_MT_DIRECT | INPUT_MT_DROP_UNUSED);
@@ -649,7 +693,7 @@ static int goodix_request_input_dev(struct goodix_ts_data *ts)
 		return error;
 	}
 
-	return 0;
+	return goodix_request_pen_dev(ts);
 }
 
 /**
diff --git a/drivers/net/wireless/ath/regd_common.h b/drivers/net/wireless/ath/regd_common.h
old mode 100644
new mode 100755
index 15bbd1e0d912..4a203ff45a7f
--- a/drivers/net/wireless/ath/regd_common.h
+++ b/drivers/net/wireless/ath/regd_common.h
@@ -75,7 +75,7 @@ enum EnumRd {
 	APL7_FCCA = 0x5C,
 	APL8_WORLD = 0x5D,
 	APL9_WORLD = 0x5E,
-
+  APL10_WORLD = 0x5F,
 	WOR0_WORLD = 0x60,
 	WOR1_WORLD = 0x61,
 	WOR2_WORLD = 0x62,
@@ -202,6 +202,7 @@ static struct reg_dmn_pair_mapping regDomainPairs[] = {
 	{APL6_WORLD, CTL_ETSI, CTL_ETSI},
 	{APL8_WORLD, CTL_ETSI, CTL_ETSI},
 	{APL9_WORLD, CTL_ETSI, CTL_ETSI},
+  {APL10_WORLD, CTL_ETSI, CTL_ETSI},
 
 	{APL3_FCCA, CTL_FCC, CTL_FCC},
 	{APL7_FCCA, CTL_FCC, CTL_FCC},
@@ -423,6 +424,7 @@ static struct country_code_to_enum_rd allCountries[] = {
 	{CTRY_KOREA_ROC, APL9_WORLD, "KR"},
 	{CTRY_KOREA_ROC2, APL2_WORLD, "K2"},
 	{CTRY_KOREA_ROC3, APL9_WORLD, "K3"},
+  {CTRY_KOREA_ROC, APL10_WORLD, "KR"},
 	{CTRY_KUWAIT, ETSI3_WORLD, "KW"},
 	{CTRY_LATVIA, ETSI1_WORLD, "LV"},
 	{CTRY_LEBANON, NULL1_WORLD, "LB"},
diff --git a/drivers/staging/media/atomisp/i2c/Kconfig b/drivers/staging/media/atomisp/i2c/Kconfig
old mode 100644
new mode 100755
index b80d29d53e65..25778c961aba
--- a/drivers/staging/media/atomisp/i2c/Kconfig
+++ b/drivers/staging/media/atomisp/i2c/Kconfig
@@ -27,6 +27,17 @@ config VIDEO_GC2235
 
          It currently only works with the atomisp driver.
 
+config VIDEO_GC2355
+       tristate "Galaxy gc2355 sensor support"
+       depends on I2C && VIDEO_V4L2
+       ---help---
+         This is a Video4Linux2 sensor-level driver for the OVT
+         GC2355 raw camera.
+
+         GC2355 is a 2M raw sensor.
+
+         It currently only works with the atomisp driver.
+
 config VIDEO_OV8858
        tristate "Omnivision ov8858 sensor support"
        depends on I2C && VIDEO_V4L2 && VIDEO_ATOMISP
diff --git a/drivers/staging/media/atomisp/i2c/Makefile b/drivers/staging/media/atomisp/i2c/Makefile
old mode 100644
new mode 100755
index 041a041718d2..8958b5c60b0d
--- a/drivers/staging/media/atomisp/i2c/Makefile
+++ b/drivers/staging/media/atomisp/i2c/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_VIDEO_IMX)        += imx/
 obj-$(CONFIG_VIDEO_OV5693)     += ov5693/
 obj-$(CONFIG_VIDEO_MT9M114)    += mt9m114.o
 obj-$(CONFIG_VIDEO_GC2235)     += gc2235.o
+obj-$(CONFIG_VIDEO_GC2355)     += gc2355.o
 obj-$(CONFIG_VIDEO_OV2722)     += ov2722.o
 obj-$(CONFIG_VIDEO_OV2680)     += ov2680.o
 obj-$(CONFIG_VIDEO_GC0310)     += gc0310.o
diff --git a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
old mode 100644
new mode 100755
index edaae93af8f9..0edf568b8594
--- a/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
+++ b/drivers/staging/media/atomisp/platform/intel-mid/atomisp_gmin_platform.c
@@ -305,6 +305,16 @@ static const struct gmin_cfg_var ecs7_vars[] = {
 	{},
 };
 
+static const struct gmin_cfg_var ezpad_go_vars[] = {
+  {"GCSN2355:00_CsiPort", "1"},
+  {"GCSN2355:00_CsiLanes", "2"},
+  {"GCSN2355:00_CsiFmt", "13"},
+  {"GCSN2355:00_CsiBayer", "0"},
+  {"GCSN2355:00_CamClk", "0"},  
+  {"GCSN2355:00_ClkSrc", "0"},
+  {},
+};
+
 
 static const struct gmin_cfg_var i8880_vars[] = {
 	{"XXOV2680:00_CsiPort", "1"},
@@ -325,6 +335,7 @@ static const struct {
 	{ "MRD7", mrd7_vars },
 	{ "ST70408", ecs7_vars },
 	{ "VTA0803", i8880_vars },
+  { "To be filled by O.E.M.", ezpad_go_vars },
 };
 
 
