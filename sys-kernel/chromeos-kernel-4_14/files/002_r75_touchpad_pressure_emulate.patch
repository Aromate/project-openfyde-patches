diff --git a/drivers/bluetooth/btusb.c b/drivers/bluetooth/btusb.c
index f698e55c0e61..fa1e5fa3a55b 100644
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@ -343,6 +343,7 @@ static const struct usb_device_id blacklist_table[] = {
 	{ USB_DEVICE(0x1286, 0x2044), .driver_info = BTUSB_MARVELL },
 	{ USB_DEVICE(0x1286, 0x2046), .driver_info = BTUSB_MARVELL },
 	{ USB_DEVICE(0x1286, 0x204e), .driver_info = BTUSB_MARVELL },
+  { USB_DEVICE(0x1286, 0x204b), .driver_info = BTUSB_MARVELL },
 
 	/* Intel Bluetooth devices */
 	{ USB_DEVICE(0x8087, 0x0025), .driver_info = BTUSB_INTEL_NEW },
diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 7afed140c228..b60bc36a47dc 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -786,6 +786,17 @@
 #define USB_DEVICE_ID_MS_TOUCH_COVER_2   0x07a7
 #define USB_DEVICE_ID_MS_TYPE_COVER_2    0x07a9
 #define USB_DEVICE_ID_MS_POWER_COVER     0x07da
+#define USB_DEVICE_ID_MS_TYPE_COVER_3		0x07de
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_3	0x07dc
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_3_1	0x07de
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_3_2	0x07e2
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_3_JP	0x07dd
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_4	0x07e8
+#define USB_DEVICE_ID_MS_TYPE_COVER_PRO_4_1	0x07e4
+#define USB_DEVICE_ID_MS_SURFACE_BOOK		0x07cd
+#define USB_DEVICE_ID_MS_SURFACE_BOOK_2		0x0922
+#define USB_DEVICE_ID_MS_SURFACE_GO			0x096f
+#define USB_DEVICE_ID_MS_SURFACE_VHF		0xf001
 
 #define USB_VENDOR_ID_MOJO		0x8282
 #define USB_DEVICE_ID_RETRO_ADAPTER	0x3201
diff --git a/drivers/hid/hid-multitouch.c b/drivers/hid/hid-multitouch.c
index 6c65d9428dce..49dda02bd605 100644
--- a/drivers/hid/hid-multitouch.c
+++ b/drivers/hid/hid-multitouch.c
@@ -142,6 +142,9 @@ struct mt_device {
 	__s32 dev_time;		/* the scan time provided by the device */
 	unsigned long jiffies;	/* the frame's jiffies */
 	int timestamp;		/* the timestamp to be sent */
+  bool pressure_emulate;
+  __s32 pre_pressure;
+  int pressure_step;
 };
 
 static void mt_post_parse_default_settings(struct mt_device *td);
@@ -883,6 +886,16 @@ static void mt_process_mt_event(struct hid_device *hid, struct hid_field *field,
 				td->curdata.cx = value;
 			else
 				td->curdata.x = value;
+      if (td->pressure_emulate) {
+        if (td->curdata.p == 0) {
+          td->curdata.p = td->pre_pressure;
+          if (td->pre_pressure > 300)
+            td->pressure_step = -20;
+          else if (td->pre_pressure < 100)
+            td->pressure_step = 30;
+          td->pre_pressure += td->pressure_step;
+        }
+      }
 			break;
 		case HID_GD_Y:
 			if (usage->code == ABS_MT_TOOL_Y)
@@ -1120,11 +1133,20 @@ static int mt_input_mapped(struct hid_device *hdev, struct hid_input *hi,
 	 * some egalax touchscreens have "application == HID_DG_TOUCHSCREEN"
 	 * for the stylus.
 	 */
+  struct mt_device *td = hid_get_drvdata(hdev);
+  struct mt_class *cls = &td->mtclass;
+
 	if (field->physical == HID_DG_STYLUS)
 		return 0;
 
 	if (field->application == HID_DG_TOUCHSCREEN ||
 	    field->application == HID_DG_TOUCHPAD) {
+    if (cls->name == MT_CLS_DEFAULT && 
+      !test_bit(ABS_MT_PRESSURE, hi->input->absbit)) {
+      td->pressure_emulate = true;
+      input_set_abs_params(hi->input, ABS_MT_PRESSURE, 0,
+            1024, 0, 0);
+    }
 		/* We own these mappings, tell hid-input to ignore them */
 		return -1;
 	}
